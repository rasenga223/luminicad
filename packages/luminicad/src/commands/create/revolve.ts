import {
    GeometryNode,
    ICurve,
    IEdge,
    ILine,
    IShape,
    IShapeFilter,
    Property,
    Ray,
    ShapeType,
    command,
} from "luminicad-core";
import { RevolvedNode } from "../../bodys";
import { IStep } from "../../step";
import { SelectShapeStep } from "../../step/selectStep";
import { CreateCommand } from "../createCommand";

@command({
    name: "convert.revol",
    display: "command.revol",
    icon: `<svg viewBox="0 0 512.004 512.004" fill="none">
        <path d="m484.803.002h-42.283c-11.409-.165-23.297 10.324-22.475 23.578.566 12.013 10.624 21.422 22.898 21.422h24.058v24.058c0 12.274 9.409 22.333 21.422 22.898 11.48.804 23.68-9.254 23.578-22.475v-42.283c0-14.997-12.201-27.198-27.198-27.198zm12.198 69.482c-.075 3.189-2.592 7.453-7.873 7.491-3.93-.185-7.127-3.736-7.127-7.915v-28.558c0-5.79-4.71-10.5-10.5-10.5h-28.558c-4.179 0-7.729-3.197-7.915-7.128-.083-3.187 2.236-7.585 7.491-7.872h42.283c6.727 0 12.198 5.472 12.198 12.198v42.284z" fill="#808080"></path>
        <path d="m21.423 91.958c11.48.804 23.68-9.254 23.578-22.475v-24.481h24.481c11.409.165 23.297-10.324 22.475-23.578-.566-12.012-10.624-21.422-22.898-21.422h-41.86c-14.997 0-27.198 12.201-27.198 27.198v41.86c0 12.274 9.409 22.333 21.422 22.898zm-6.422-64.758c0-6.726 5.472-12.198 12.198-12.198h41.859c4.179 0 7.729 3.197 7.915 7.128.083 3.187-2.236 7.585-7.491 7.872h-28.981c-5.79 0-10.5 4.71-10.5 10.5v28.982c-.075 3.189-2.593 7.453-7.873 7.491-3.93-.185-7.127-3.736-7.127-7.915z" fill="#808080"></path>
        <path d="m69.059 467.002h-24.058v-24.482c.17-11.411-10.333-23.292-23.578-22.475-12.013.566-21.422 10.624-21.422 22.899v41.86c0 14.997 12.201 27.198 27.198 27.198h42.283c11.409.165 23.297-10.324 22.475-23.578-.566-12.012-10.624-21.422-22.898-21.422zm5.851 27.675c-1.43 1.499-3.357 2.325-5.428 2.325h-42.283c-6.727 0-12.198-5.472-12.198-12.198v-41.86c0-4.179 3.197-7.73 7.127-7.915 3.307-.088 7.543 2.239 7.873 7.491v28.982c0 5.79 4.71 10.5 10.5 10.5h28.558c4.179 0 7.729 3.197 7.915 7.128.097 2.08-.635 4.05-2.064 5.547z" fill="#808080"></path>
        <path d="m488.423 420.045c-12.013.565-21.422 10.624-21.422 22.898v24.058h-24.481c-11.409-.165-23.297 10.324-22.475 23.578.566 12.013 10.624 21.422 22.898 21.422h41.859c14.997 0 27.198-12.201 27.198-27.198v-42.283c.167-11.411-10.326-23.292-23.577-22.475zm8.578 64.759c0 6.726-5.472 12.198-12.198 12.198h-41.859c-4.179 0-7.729-3.197-7.915-7.128-.083-3.187 2.236-7.585 7.491-7.872h28.981c5.79 0 10.5-4.71 10.5-10.5v-28.558c0-4.179 3.197-7.73 7.127-7.915 3.193-.082 7.585 2.235 7.873 7.491z" fill="#808080"></path>
        <path d="m504.501 248.502h-52.657c-3.864-102.122-86.221-184.479-188.343-188.343v-52.657c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v52.655c-24.174.902-47.618 6.153-69.787 15.674-3.806 1.634-5.566 6.045-3.932 9.851s6.044 5.568 9.852 3.932c11.531-4.952 23.44-8.65 35.632-11.09-8.992 10.016-17.138 23.937-24.071 41.426-6.971 17.585-12.426 37.934-16.211 60.037-22.103 3.785-42.451 9.24-60.036 16.211-17.456 6.919-31.357 15.047-41.369 24.019 9.324-46.352 36.534-87.669 76.695-114.621 3.439-2.308 4.356-6.967 2.048-10.407-2.308-3.439-6.966-4.356-10.407-2.048-52.338 35.123-84.376 92.778-86.755 155.362h-52.659c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h52.657c3.863 102.121 86.221 184.479 188.343 188.343v52.657c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-52.657c102.122-3.863 184.479-86.221 188.343-188.343h52.657c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.501-7.5-7.501zm-71.071-28.345c-6.592-5.885-14.89-11.418-24.837-16.514-3.685-1.887-8.207-.431-10.095 3.256-1.889 3.687-.432 8.206 3.255 10.095 22.73 11.644 35.248 25.498 35.248 39.009 0 16.431-18.397 33.146-50.474 45.861-15.358 6.087-32.987 10.964-52.144 14.512 2.22-16.922 3.496-34.683 3.773-52.873h7.345c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-7.345c-.277-18.184-1.552-35.939-3.771-52.855 12.651 2.352 24.697 5.279 35.936 8.789 3.957 1.237 8.16-.97 9.395-4.924 1.234-3.954-.97-8.16-4.924-9.395-13.305-4.155-27.657-7.537-42.775-10.132-3.785-22.102-9.24-42.451-16.211-60.036-6.924-17.469-15.06-31.377-24.04-41.391 71.141 14.315 127.317 70.469 141.664 141.598zm-176.929 88.345c-4.143 0-7.5 3.358-7.5 7.5v7.161c-19.346-.282-38.152-1.727-55.897-4.256-2.518-17.616-3.963-36.216-4.26-55.405h7.657c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-7.654c.299-19.172 1.742-37.81 4.25-55.404 17.747-2.53 36.556-3.975 55.905-4.257v8.161c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-8.15c19.012.314 37.441 1.758 54.906 4.254 2.507 17.592 3.949 36.227 4.249 55.396h-7.654c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h7.654c-.299 19.172-1.742 37.81-4.25 55.404-17.442 2.486-35.908 3.926-54.905 4.242v-7.146c-.001-4.142-3.358-7.5-7.501-7.5zm-46.361-183.026c12.715-32.077 29.431-50.474 45.861-50.474s33.146 18.397 45.861 50.474c6.088 15.359 10.964 32.989 14.513 52.147-16.776-2.203-34.335-3.484-52.375-3.774v-6.848c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v6.838c-18.365.261-36.297 1.54-53.374 3.78 3.55-19.156 8.426-36.785 14.514-52.143zm-84.665 84.665c15.358-6.087 32.987-10.964 52.144-14.512-2.22 16.922-3.496 34.683-3.773 52.873h-7.345c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h7.343c.274 18.216 1.555 35.945 3.778 52.874-19.158-3.549-36.788-8.425-52.147-14.513-32.076-12.715-50.474-29.43-50.474-45.861s18.397-33.146 50.474-45.861zm-46.918 81.627c10.014 8.979 23.922 17.115 41.391 24.039 17.585 6.97 37.933 12.425 60.035 16.21 2.611 15.207 6.017 29.639 10.206 43.011 1.238 3.952 5.444 6.152 9.399 4.915 3.952-1.238 6.153-5.446 4.915-9.399-3.541-11.303-6.492-23.424-8.859-36.158 17.072 2.239 34.997 3.517 53.356 3.778v7.838c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-7.853c18.016-.292 35.607-1.566 52.374-3.766-3.549 19.157-8.425 36.786-14.512 52.144-12.715 32.077-29.431 50.474-45.861 50.474-13.498 0-27.342-12.498-38.979-35.19-1.892-3.687-6.411-5.14-10.097-3.251-3.686 1.891-5.141 6.411-3.251 10.096 5.087 9.919 10.61 18.196 16.483 24.775-71.129-14.347-127.284-70.523-141.6-141.663zm213.21 141.678c8.979-10.014 17.115-23.922 24.04-41.391 6.971-17.585 12.426-37.934 16.211-60.037 22.103-3.785 42.451-9.24 60.036-16.211 17.469-6.924 31.377-15.059 41.391-24.039-14.321 71.166-70.512 127.356-141.678 141.678z" fill="#1F77B4" opacity="0.7"></path>
        <path d="m101.501 263.502h30c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-30c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5z" fill="#808080"></path>
        <path d="m373.001 256.002c0 4.142 3.357 7.5 7.5 7.5h30c4.143 0 7.5-3.358 7.5-7.5s-3.357-7.5-7.5-7.5h-30c-4.143 0-7.5 3.358-7.5 7.5z" fill="#808080"></path>
        <path d="m288.001 256.002c0-4.142-3.357-7.5-7.5-7.5h-17v-17c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v17h-17c-4.143 0-7.5 3.358-7.5 7.5s3.357 7.5 7.5 7.5h17v17c0 4.142 3.357 7.5 7.5 7.5s7.5-3.358 7.5-7.5v-17h17c4.143 0 7.5-3.358 7.5-7.5z" fill="#808080"></path>
        <path d="m256.501 419.502c4.143 0 7.5-3.358 7.5-7.5v-30c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v30c0 4.142 3.357 7.5 7.5 7.5z" fill="#808080"></path>
        <path d="m256.501 139.502c4.143 0 7.5-3.358 7.5-7.5v-30c0-4.142-3.357-7.5-7.5-7.5s-7.5 3.358-7.5 7.5v30c0 4.142 3.357 7.5 7.5 7.5z" fill="#808080"></path>
    </svg>`,
})
export class Revolve extends CreateCommand {
    @Property.define("common.angle")
    public get angle() {
        return this.getPrivateValue("angle", 360);
    }
    public set angle(value: number) {
        this.setProperty("angle", value);
    }

    protected override geometryNode(): GeometryNode {
        const shape = this.stepDatas[0].shapes[0].shape;
        const edge = (this.stepDatas[1].shapes[0].shape as IEdge).curve().basisCurve() as ILine;
        const axis = new Ray(edge.value(0), edge.direction);
        return new RevolvedNode(this.document, shape, axis, this.angle);
    }

    protected override getSteps(): IStep[] {
        return [
            new SelectShapeStep(ShapeType.Edge | ShapeType.Face | ShapeType.Wire, "prompt.select.shape"),
            new SelectShapeStep(ShapeType.Edge, "prompt.select.edges", {
                filter: new LineFilter(),
                keepSelection: true,
            }),
        ];
    }
}

class LineFilter implements IShapeFilter {
    allow(shape: IShape): boolean {
        if (shape.shapeType === ShapeType.Edge) {
            let edge = shape as IEdge;
            let curve = edge.curve().basisCurve();
            return ICurve.isLine(curve);
        }
        return false;
    }
}
